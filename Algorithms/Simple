#include <bits/stdc++.h>
using namespace std;
int solveIt(long x, long arranjo[], long saize){
	
	if(x == 1){//caso base
		long aux = 1;
		for(int i = 0; i< saize; i++){
		aux*=arranjo[i];
		}
		return aux;	
	}
	int aux2;
	for(int i = 0; i<x-1;i++){
			if(x%(i+2)==0){//se for divisivel, ira dividir
			aux2 = i+2;
			arranjo[i]++;
			break;
			}
	}//Um valor certamente irá sair daqui, nem que seja o proprio valor
	return solveIt(x/aux2, arranjo,saize);

}

long numbers;
long from,to,maxi , results;

int main(){
	cin.tie(0);
	ios::sync_with_stdio(0);
	cin>>numbers;
	while(numbers--){
		cin>>from>>to;
		long arranjo[(to-from)+1];//cria array para armazenar os maiores divisores

		for(int i = from; i<=to;i++){
			long arranjo2[i-1];//array para fazer a decomposição do numero
			//-1 por ignorar o valor de -1.
			for(int j = 0; j<i-1; j++){
				arranjo2[j] = 1;//icia com 1 para poder multiplicar posteriormente			
			}
		arranjo[i-from] = solveIt(i, arranjo2, i-1);//metodo para decompor
		
		if(results < arranjo[i-from]){//armazena a melhor resposta
			results = arranjo[i-from];
			maxi = i;
			}
		}

	

		cout<<"Between "<<from<<" and "<<to<<", "<<maxi<<" has a maximum of ";
		cout<<results<<" divisors.\n";
		results = 0;
		maxi = 0;
	}




}
/*
1000
500 2
250 2
125 2
25 5
5 5
1 5
2^3 * 5^3

*/
