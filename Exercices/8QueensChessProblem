package prototype;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner leia = new Scanner(System.in);
		int index = leia.nextInt();
		for (int i = 0; i < index; i++) {
			System.out.println("SOLN       COLUMS");
			System.out.println(" #      1 2 3 4 5 6 7 8 ");
			System.out.println();
			int answer[] = new int[8];
			int[][] ChessTable = new int[8][8];
			int Row = leia.nextInt(), colum = leia.nextInt() - 1;
			ChessTable[Row - 1][colum] = 7;
			answer[colum] = Row;
			FourQueens(ChessTable, answer, 0, 1);
		}
	}

	private static void FourQueens(int[][] ChessTable, int[] answer, int colum, int index) {
		if (answer[colum] != 0) {
			FourQueens(ChessTable, answer, colum + 1, index);
		}
		if (colum < 8) {

		} else {
			System.out.print(" " + index + "      ");
			for (int control = 0; control < answer.length; control++) {
				if (control < answer.length - 1) {
					System.out.print(answer[control] + " ");
				} else {
					System.out.print(answer[control]);
				}
			}
		}
	}

	private static boolean checkQueen(int[][] ChessTable, int i, int j) {// i linha, j colunas
		int aux = i - j, aux2 = i + j, aux3 = ChessTable.length;
		ChessTable[i][j] = 7;
		for (int k = 0; k < aux3; k++) {
			if (k != i) {
				if (ChessTable[k][j] == 7) {
					return false;
				}
			}
			if (k != j) {
				if (ChessTable[i][k] == 7) {
					return false;
				}
			}
			if ((k <= aux2) && aux2 < aux3) {
				if ((aux2 - k) != i || k != j) {
					if (ChessTable[aux2 - k][k] == 7) {
						return false;
					}
				}
			} else if ((k <= 2 * aux3 - (aux2 + 2)) && aux2 >= aux3) {
				if (((aux2 + 1 - aux3) + k) != j || (aux3 - 1 - k) != i) {
					if (ChessTable[(aux3 - 1) - k][(aux2 + 1 - aux3) + k] == 7) {
						return false;
					}

				}
			}
			if (aux > 0) { // i >= j
				if (!(k + aux >= aux3)) {
					if (k + aux != i && k != j) {
						if (ChessTable[k + aux][k] == 7) {
							return false;
						}
						;
					}
				}
			} else { // j>i
				if (!(k - aux >= aux3)) {
					if (k - aux != j && k != i) {
						if (ChessTable[k][k - aux] == 7) {
							return false;
						}

					}
				}
			}
		}
		return true;
	}

}
